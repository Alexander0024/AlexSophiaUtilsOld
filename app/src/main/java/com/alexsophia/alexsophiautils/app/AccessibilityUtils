object AccessibilityUtils {
    private var mHandler: Handler

    private const val EVENT_CLICK = 1

    init {
        val mThread = HandlerThread("ActionThread")
        mThread.start()
        mHandler = Handler(mThread.looper) {
            when (it.what) {
                EVENT_CLICK -> {
                    val event = it.obj as EVENTS
                    loge("performActionByText: ${event.text}")
                    findNode(event.text)?.forEach { info ->
                        if (doingClickOnNode(info)) {
                            event.callbackOnSuccess?.invoke("Click ${info.text} Success!")
                        } else {
                            event.callbackOnFailed?.invoke(Exception("Can't find ${info.text}"))
                        }
                    }
                    return@Handler true
                }
                else -> {
                    return@Handler false
                }
            }
        }
    }

    /**
     * 通过文本查找结点并触发单击事件
     */
    fun performClick(text: String, delay: Long = 800,
                     callbackOnSuccess: ((msg: String?) -> Unit)? = null,
                     callbackOnFailed: ((ex: Exception?) -> Unit)? = null) {
        loge("performClick: $text delay $delay")
        send(EVENT_CLICK, EVENTS(text, callbackOnSuccess, callbackOnFailed), delay)
    }


//    如果想为EditText设置文字可以用：
//    Bundle arguments = new Bundle();
//    arguments.putCharSequence(AccessibilityNodeInfo.ACTION_ARGUMENT_SET_TEXT_CHARSEQUENCE, text);
//    inputNode.performAction(AccessibilityNodeInfo.ACTION_SET_TEXT, arguments);

    /**
     * 执行通用操作
     * GLOBAL_ACTION_BACK    点击返回按钮
    GLOBAL_ACTION_HOME    点击home
    GLOBAL_ACTION_NOTIFICATIONS    打开通知
    GLOBAL_ACTION_RECENTS    打开最近应用
    GLOBAL_ACTION_QUICK_SETTINGS    打开快速设置
    GLOBAL_ACTION_POWER_DIALOG    打开长按电源键的弹框
     */
    fun performGlobalAction(action: Int) {
        MyAccessibilityService.INSTANCE.performGlobalAction(action)
    }

    private fun send(eventId: Int, data: Any, delay: Long) {
        mHandler.sendMessageDelayed(mHandler.obtainMessage(eventId, data), delay)
    }

    private fun findNode(text: String): List<AccessibilityNodeInfo>? {
        val rootNode = MyAccessibilityService.INSTANCE.rootInActiveWindow
        if (rootNode != null) {
            var node = rootNode.findAccessibilityNodeInfosByViewId(text)
            if (node == null || node.isEmpty()) {
                node = rootNode.findAccessibilityNodeInfosByText(text)
            }
            return node
        }
        return null
    }

    /**
     * 执行点击操作
     * AccessibilityNodeInfo 中的Action包括：
     */
    private fun doingClickOnNode(node: AccessibilityNodeInfo): Boolean = when {
        node.isClickable -> {
            loge("Click node on $node")
            node.performAction(AccessibilityNodeInfo.ACTION_CLICK)
            true
        }
        node.parent != null -> {
            loge("Click node on parent")
            doingClickOnNode(node.parent)
        }
        else -> {
            loge("Can't click on node $node")
            false
        }
    }

    data class EVENTS(val text: String,
                      val callbackOnSuccess: ((msg: String?) -> Unit)?,
                      val callbackOnFailed: ((ex: Exception?) -> Unit)?)
}
